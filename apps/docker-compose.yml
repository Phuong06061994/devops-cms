version: '3.8'

networks:
  app_network:
    driver: bridge

services:
  frontend:
    image: node:18
    container_name: frontend-app
    ports:
      - "3000:3000"
    networks:
      - app_network
      
  backend:
    image: phuong06061994/java-demo:2
    container_name: backend-app
    ports:
      - "5000:5000"
    networks:
      - app_network
  postgres:
    image: postgres:latest
    container_name: postgres-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: my-app
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app_network
      
  nginx:
    image: nginx:latest
    container_name: nginx-proxy
    ports:
      - "80:80"
    networks:
      - app_network
      
    depends_on:
      - frontend
      - backend
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf

  docker-in-docker:
    image: docker:19.03.12-dind
    container_name: docker-in-docker
    privileged: true  # Allow Docker to run inside the container
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Mount Docker socket
      - ./dockerd-entrypoint.sh:/dockerd-entrypoint.sh
    environment:
      - DOCKER_TLS_CERTDIR=/certs
    entrypoint: ["sh", "-c", "apk add --no-cache shadow && groupadd docker && dockerd --host=unix:///var/run/docker-dind.sock & /dockerd-entrypoint.sh"]

volumes:
  postgres_data:
