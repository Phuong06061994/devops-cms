version: '3.8'

networks:
  jenkins_network:
    driver: bridge
  app_network:
    driver: bridge

services:
  jenkins-master:
    build: ./jenkins-master
    container_name: jenkins-master
    ports:
      - "8080:8080"
      - "50000:50000"
    networks:
      - jenkins_network
      - app_network
    volumes:
      - jenkins_home:/var/jenkins_home
    environment:
      JENKINS_ADMIN_ID: admin
      JENKINS_ADMIN_PASSWORD: admin_password
    entrypoint: /bin/bash -c "chmod -R 444 /var/jenkins_home && /usr/local/bin/jenkins.sh"

  java-slave:
    build: ./java-slave
    container_name: java-slave
    ports:
      - "5000:5000"
    networks:
      - jenkins_network
      - app_network
    environment:
      JENKINS_MASTER_URL: http://jenkins-master:8080
      SWARM_CLIENT_NAME: java-slave
      SWARM_CLIENT_LABELS: "java"
      SWARM_CLIENT_EXECUTORS: 2
      JENKINS_USERNAME: admin
    depends_on:
      - jenkins-master
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock  # Mount Docker socket for Docker access

  node-slave:
    build: ./node-slave
    container_name: node-slave
    networks:
      - jenkins_network
      - app_network
    environment:
      JENKINS_MASTER_URL: http://jenkins-master:8080
      SWARM_CLIENT_NAME: node-slave
      SWARM_CLIENT_LABELS: "node"
      SWARM_CLIENT_EXECUTORS: 2
      JENKINS_USERNAME: admin
    depends_on:
      - jenkins-master
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock  # Mount Docker socket for Docker access

  frontend:
    image: node:18
    container_name: frontend-app
    ports:
      - "3000:3000"
    networks:
      - app_network
      - jenkins_network

  backend:
    image: openjdk:17-jdk
    container_name: backend-app
    ports:
      - "5000:5000"
    networks:
      - app_network
      - jenkins_network

  postgres:
    image: postgres:latest
    container_name: postgres-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: my-app
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app_network
      - jenkins_network

  nginx:
    image: nginx:latest
    container_name: nginx-proxy
    ports:
      - "80:80"
    networks:
      - app_network
      - jenkins_network
    depends_on:
      - frontend
      - backend
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf

  # Docker service for running Docker commands inside containers
  docker-in-docker:
    image: docker:19.03.12-dind
    container_name: docker-in-docker
    privileged: true  # Allow Docker to run inside the container
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Mount Docker socket
      - ./dockerd-entrypoint.sh:/dockerd-entrypoint.sh  # Ensure entrypoint script is present
    environment:
      - DOCKER_TLS_CERTDIR=/certs  # Optional: set up TLS for Docker
    entrypoint: ["sh", "-c", "apk add --no-cache shadow && groupadd docker && dockerd --host=unix:///var/run/docker-dind.sock & /dockerd-entrypoint.sh"]
volumes:
  jenkins_home:
  postgres_data:
